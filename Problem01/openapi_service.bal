// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

//***THIS 2023 DSA612S ASSIGNMENT WAS DONE BY***
//--1. A-Jay Steyn -- 222082429
//--2. Denver January -- 216013216
//--3. Matheus PN Matheus -- 220075921
//--4. Mushe Mulauli -- 221094296

import ballerina/http;

listener http:Listener ep0 = new (9090, config = {host: "localhost"});


service / on ep0 {
    # Retrieve a list of all lecturers within the faculty
    # + return - A list of lecturers 
    

    resource function get lecturers() returns Lecturer[] {
    }
    # Add a new lecturer
    #
    # + payload - parameter description 
    # + return - returns can be any of following types
    # http:Created (Lecturer added successfully)
    # http:BadRequest (Invalid input)
    
    

    resource function post lecturers(@http:Payload Lecturer new_Lecturer) returns http:Created|http:BadRequest {
    }

# Retrieve the details of a specific lecturer by their staff number
    #
    # + staffNumber - Unique staff number of the lecturer 
    # + return - returns can be any of following types
    # Lecturer (Details of the lecturer)
    # http:NotFound (Lecturer not found)
    

    // This endpoint retrieves the details of a specific lecturer based on their staff number.
    // Service-side: This endpoint responds to the GET request sent by the client's `get lecturers/[string staffNumber]` method.
    resource function get lecturers/[string staffNumber]() returns Lecturer|http:NotFound {

        Lecturer? queriedLecturer = lecturersTable[staffNumber];
        if (queriedLecturer is ()) {
            return http:NOT_FOUND;
        } else {
            return queriedLecturer;
        }
    }
    
    //The Following code was submitted bt Denver January -- 216013216
    # Update an existing lecturer's information
    #
    # + staffNumber - Unique staff number of the lecturer 
    # + payload - parameter description 
    # + return - returns can be any of following types
    # http:Ok (Lecturer updated successfully)
    # http:BadRequest (Invalid input)
    # http:NotFound (Lecturer not found)
    
    // This endpoint updates an existing lecturer's details.
    // Service-side: This endpoint responds to the PUT request sent by the client's `put lecturers/[string staffNumber]` method.
    resource function put lecturers/[string staffNumber](@http:Payload Lecturer updatedLecturer) returns http:Response {
         // First, check if the lecturer with the given staffNumber exists
    // First, check if the lecturer with the given staffNumber exists
    if (!lecturersTable.hasKey(staffNumber)) {
        http:Response notFoundResponse = new;
        notFoundResponse.statusCode = http:STATUS_NOT_FOUND;
        notFoundResponse.setPayload("Lecturer not found");
        return notFoundResponse;
    }

    // Remove the existing lecturer details from the lecturersTable
    _ = lecturersTable.remove(staffNumber);

    // Add the updated lecturer details to the lecturersTable
    lecturersTable.add(updatedLecturer);

    http:Response successResponse = new;
    successResponse.statusCode = http:STATUS_OK;
    successResponse.setPayload("Lecturer updated successfully");
    return successResponse;
        }

    
    


    # Delete a lecturer's record by their staff number
    #
    # + staffNumber - Unique staff number of the lecturer 
    # + return - returns can be any of following types
    # http:NoContent (Lecturer deleted successfully)
    # http:NotFound (Lecturer not found)
    


    resource function delete lecturers/[string staffNumber]() returns http:NoContent|http:NotFound|http:Response {

}


    
    # Retrieve all the lecturers that teach a certain course
    #
    # + courseName - Name of the course 
    # + return - returns can be any of following types
    # Lecturer[] (A list of lecturers teaching the course)
    # http:NotFound (Course not found)
    

    resource function get lecturers/course/[string courseName]() returns Lecturer[]|http:NotFound {
    }
    # Retrieve all the lecturers that sit in the same office
    #
    # + officeNumber - Office number 
    # + return - returns can be any of following types
    # Lecturer[] (A list of lecturers in the same office)
    # http:NotFound (Office not found)
    

   
    resource function get lecturers/office/[string officeNumber]() returns Lecturer[]|http:NotFound {
        Lecturer[] lecturersInSameOffice = [];
    }
}

