syntax = "proto3"; // Specifies that we are using version 3 of the Protocol Buffers language.

// Defines the LibraryService with various RPC methods.
service LibraryService {
    // Librarian-specific RPC methods

    // Allows a librarian to add a new book to the library.
    rpc AddBook(AddBookRequest) returns (AddBookResponse);
    
    // Enables creating multiple user accounts, e.g., for bulk registration.
    rpc CreateUsers(StreamUsersRequest) returns (CreateUsersResponse);
    
    // Allows a librarian to update details of an existing book.
    rpc UpdateBook(UpdateBookRequest) returns (UpdateBookResponse);
    
    // Provides functionality for a librarian to remove a book from the system.
    rpc RemoveBook(RemoveBookRequest) returns (RemoveBookResponse);

    
    // Student-specific RPC methods

    // Enables a student to view a list of all available books.
    rpc ListAvailableBooks(ListAvailableBooksRequest) returns (ListAvailableBooksResponse);
    
    // Allows a student to locate a specific book by its ISBN.
    rpc LocateBook(LocateBookRequest) returns (LocateBookResponse);
    
    // Provides functionality for a student to borrow a book.
    rpc BorrowBook(BorrowBookRequest) returns (BorrowBookResponse);
}

// Message definitions

// Represents details required to add a new book.
message AddBookRequest {
    string title = 1; // The title of the book.
    string author_1 = 2; // The primary author of the book.
    string author_2 = 3; // An optional second author of the book.
    string location = 4; // The physical location/shelf of the book in the library.
    string isbn = 5; // The International Standard Book Number (ISBN) for the book.
    bool status = 6; // The availability status: true indicates the book is available, false indicates it's borrowed.
}

// Represents the response after adding a book, typically returning the ISBN for confirmation.
message AddBookResponse {
    string isbn = 1; 
}

// Used to stream multiple user details for batch creation.
message StreamUsersRequest {
    repeated User users = 1; // A list of user details.
}

// Represents a single user's basic details.
message User {
    string id = 1; // Unique identifier for the user.
    UserType type = 2; // Specifies whether the user is a student or librarian.
}

// Enum to classify users as either students or librarians.
enum UserType {
    STUDENT = 0;
    LIBRARIAN = 1;
}

// Indicates the result of the batch user creation process.
message CreateUsersResponse {
    string status = 1; // "Success" if all users were created successfully, "Failure" otherwise.
}

// Represents details required to update an existing book.
message UpdateBookRequest {
    string isbn = 1; // The ISBN of the book to be updated.
    // The updated details of the book:
    string title = 2;
    string author_1 = 3;
    string author_2 = 4; // Optional second author.
    string location = 5;
}

// Indicates the result of the book update process.
message UpdateBookResponse {
    string status = 1; // "Updated" if the book was found and updated, "Not Found" otherwise.
}

// Contains the ISBN of the book to be removed.
message RemoveBookRequest {
    string isbn = 1;
}

// Represents the response after removing a book, which includes details of the removed books.
message RemoveBookResponse {
    repeated Book books = 1; // List of books that were removed.
}

// An empty message, as no specific input is required to list available books.
message ListAvailableBooksRequest {}

// Contains a list of all available books in the library.
message ListAvailableBooksResponse {
    repeated Book books = 1; // List of available books.
}

// Represents the ISBN of the book a student wishes to locate.
message LocateBookRequest {
    string isbn = 1;
}

// Provides details about a book's location and its availability status.
message LocateBookResponse {
    string location = 1; // The physical location/shelf of the book in the library.
    string status = 2; // "Available" if the book can be borrowed, "Not Available" otherwise.
}

// Contains details of a user and a book for the borrowing process.
message BorrowBookRequest {
    string user_id = 1; // The ID of the user wishing to borrow a book.
    string isbn = 2; // The ISBN of the book to be borrowed.
}

// Indicates the result of the book borrowing process.
message BorrowBookResponse {
    string status = 1; // "Borrowed" if the process was successful, "Not Available" if the book is already borrowed.
}

// Represents details of a book.
message Book {
    string title = 1;
    string author_1 = 2;
    string author_2 = 3; // Optional second author.
    string location = 4;
    string isbn = 5;
    bool status = 6; // Availability status of the book.
}
